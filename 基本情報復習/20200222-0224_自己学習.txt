■バックアップ
　障害対策として、万一の場合に備えてバックアップを取ることが重要
　冗長化との違いはデータが複製されること、別の場所で保管されること
　バックアップの取得頻度やタイミングを明確にする必要がある
　RTO(リカバリ目標時間)：リカバリにかかる時間
　RPO(リカバリ復旧時点)：リカバリする時点

・システムバックアップ
　OSやミドルウェアなどサーバのローカルディスクにあたる領域のバックアップ
　バックアップの頻度はデータに比べて少ない
　システムバックアップのタイミングは主に以下
　・初期構築時
　・パッチ適用時
　・構成変更時
　システムバックアップは計画停止時などに取得を行うことが一般的

・データバックアップ
　システムバックアップよりも取得頻度は高い
　停止が難しいシステムの場合オンラインのままでのデータ取得を行う
　オンラインのシステムの場合、データの整合性を考えることが重要
　データベースのバックアップを行う場合、実際のデータだけでなくデータのバックアップ以降のトランザクション情報である
　ジャーナルログを同時に取得することでバックアップデータの整合性を保つ
　
■ジャーナリング
　トランザクション、データの変更履歴のこと
　以下の特徴がある
　・トランザクション(処理)の内容を記録したもの
　・データ復旧時のロールバック・ロールフォワードに使用
　
・ジャーナリングのメリット
　システム障害時の復旧を迅速に行える
　データのレプリカを取得するよりもシステムリソースを消費せずデータの整合性を保つことができる
　データの更新が発生するシステムにおいてはトランザクションの内容を記録し、データの耐障害性を高められる

・ジャーナリングのデメリット
　書き込み時にオーバヘッドが発生する
　性能を重要視するシステムにおいては不向き

■クロスサイトスクリプティング
　攻撃者が不正なスクリプトを挿入することができる環境を与えてしまうことで発生する脆弱性をついた攻撃
　主に「javascript」「htmlタグ」が使われることが多い
　-事例1
　1.ユーザを偽のWebサイトに誘導する
　2.ユーザが罠のあるサイトにアクセスする
　3.ユーザがスクリプトが仕込まれたリンクをクリックする
　4.リンクからサイトに遷移する際にスクリプトによって偽のサイトにアクセスする
　5.偽サイトでパスワード、個人情報などを入力する
　6.個人情報が流出してしまう。
　サイトの脆弱性により、スクリプトを埋め込まれることで脆弱性が発生
 -事例2
 1.不正なスクリプトを含むURLに誘導する
 2.URLにアクセスする
 3.アクセスに対して不正なスクリプトを含んだWebページを返す
 4.Webブラウザで不正なスクリプトが実行され、スクリプトにより利用者のCookieが送信される
 5.攻撃者が利用者のCookieを取得する
 XSSでスクリプトが実行されるのはWebブラウザ
 サニタイジングなどのエスケープ処理が必要

■クロスサイトリクエストフォージェリ
 -事例
 1.不正なスクリプトを含んだURLを攻撃者が送信する
 2.利用者がURLからアクセスする
 3.不正なリクエストが実行され利用者のCookieが送信される
 4.Cookieの情報を使用し、攻撃者によってアプリケーション上で処理が行われる

■その他セキュリティ攻撃
・ディレクトリトラバーサル
　相対パスを利用し、ディレクトリを横断することで公開していないディレクトリにアクセスする攻撃。
　入力するパラメーラのチェックを行うことで防止する。
・バッファオーバフロー
　バッファの許容範囲以上のデータを意図的に送りつけ、オーバフローさせる攻撃。
　許容範囲を超えたデータの書き込みを禁止することで防止する。
・フィッシング
　実在する企業を装ったメールやWebサイトでユーザを騙し、個人情報などを不正に取得する。
・DoS攻撃
　サーバにリクエストを故意的に大量に送りつけ、サーバを過負荷状態にし正常なサービスの継続を妨害する攻撃。
・ゼロデイ攻撃
　セキュリティパッチが適用される前に行う攻撃。
　
■WAF
　Webアプリケーションのやりとりを監視する。
　アプリケーションレベルの不正なアクセスを阻止する役割。
　・ホワイトリスト方式
　　原則として通信を遮断し、ホワイトリストの通信パターンのみを通過させる。
　・ブラックリスト方式
　　原則として通信を許可し、ブラックリストの通信パターンのみ遮断する。

■ファイアウォール
　リモートネットワークとローカルネットワークの中間に設置。　
　不正なデータの通過を阻止する。
　パケットのIPアドレス、ポート番号、通信プロトコルでパケットの通過・不通過を決定する。
　・プロキシサーバ
　　httpプロトコルを扱うものをプロキシサーバと呼ぶ。
　　クライアントからWebサーバへのアクセスを中継する役割。(フォワードプロキシ)
　　Webページへのアクセス時に内容をキャッシュし、次にそのWebページにアクセスの要求があったときに、インターネットへの問い合わせは行わずキャッシュした内容を返す。
　　キャッシュできるのは内容に変化のない静的コンテンツのみ。
　　インターネットからのアクセスをWebページに中継する役割。(リバースプロキシ)

■ウイルス対策
　・ウイルス対策ソフト
　　クライアントのPCにインストールして利用する。
　　ウイルスの特徴を記載したデータベースである、パターンファイルを用いて付き合わせてウイルス感染を防ぐ。
　　常に最新のパターンファイル情報を取得しなければ意味がない。
　・セキュリティパッチ
　　OSなどにセキュリティホール(セキュリティ上の弱点。設計・開発時に起きるもの)があった時に、開発元が提供する修正プログラム。
　　常に最新のセキュリティパッチを使用する必要がある。
　・ビヘイビア法
　　検査対象プログラムをサンドボックス(仮装環境)内で実行して、その挙動を監視することでウイルスかどうかを検知する方法。
　　ウイルスによく見られる行動を起こせばウイルスと判断する。
　　パターンファイルに存在しないウイルスを検知することができる利点がある。
　　
■暗号化
　暗号化の基本
　・平文を暗号化できること
　・暗号を平文に復号できること
　キーを他人が入手できないようにする、変換ルールを複雑にすることが必要

　・共通鍵暗号方式
　　暗号化と復号化のキーとルールが同じ。
　　送信者と受信者が同一のキー(共通鍵)を持つ。
　　通信相手ごとに鍵を作成、管理することになる。
　　共通鍵の送付方法は送信者と受信者で工夫する必要がある。
　　メール等で送付してしまうと、盗聴等により第3者に鍵が渡ってしまう可能性がある。
　　代表的な実装方式はDES,AES

　・公開鍵暗号化方式
　　暗号化と復号化のキーとルールが異なる。
　　暗号化に使用する公開鍵は一般に公開する。
　　復号化に使用する秘密鍵は受信者が厳重に管理し、復号に使用する。
　　受信者の公開鍵で暗号化し、受信者の秘密鍵で復号化する。
　　送信者が増えても受信者が所有するのは自身の秘密鍵のみでよい。
　　共通鍵暗号方式に比べて、暗号化、復号化の処理に時間がかかる。
　　代表的な実装方式はRSA,楕円曲線暗号など

　・ハイブリット方式
　　公開鍵暗号方式はRSAなどで鍵配布時のセキュリティの確保、管理する鍵の個数の問題は解決できるが、演算が複雑でCPUには大きな負担をかける。
　　データ本文のやりとりには共通鍵方式を利用し、鍵の受け渡しには公開鍵暗号方式を利用する。
　　速度と強度の両方を確保することができる。
　　鍵の送付：共通鍵を公開鍵で暗号化して、秘密鍵で復号化する。
　　データ本文：共通鍵で暗号化し、共通鍵で復号化する。
